{"ast":null,"code":"var _jsxFileName = \"C:\\\\java_full\\\\Spring_boot\\\\o9o9_frontend_0410\\\\src\\\\component\\\\main\\\\FeedModalHashtags.js\",\n    _s = $RefreshSig$();\n\nimport \"./FeedModalHashtags.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FeedModalHashtags = _ref => {\n  _s();\n\n  let {\n    hashArr,\n    setHashArr\n  } = _ref;\n  // onChange로 관리할 문자열\n  const [hashtag, setHashtag] = useState(\"\"); // 해시태그를 담을 배열\n  //const [hashArr, setHashArr] = useState([\"\"]);\n\n  const onChangeHashtag = e => {\n    setHashtag(e.target.value);\n  }; // useEffect(() => {\n  //   console.log(hashArr);\n  // }, [hashArr]);\n\n\n  const onKeyUp = useCallback(e => {\n    if (typeof window !== \"undefined\") {\n      /* 요소 불러오기, 만들기*/\n      const $HashWrapOuter = document.querySelector(\".HashWrapOuter\");\n      const $HashWrapInner = document.createElement(\"div\");\n      $HashWrapInner.className = \"HashWrapInner\";\n      /* 태그를 클릭 이벤트 관련 로직 */\n\n      $HashWrapInner.addEventListener(\"click\", () => {\n        $HashWrapOuter === null || $HashWrapOuter === void 0 ? void 0 : $HashWrapOuter.removeChild($HashWrapInner);\n        console.log($HashWrapInner.innerHTML);\n        setHashArr(hashArr.filter(hashtag => hashtag));\n      });\n      /* enter 키 코드 :13 */\n\n      if ((window.event.keyCode === 32 || window.event.keyCode === 13) && e.target.value.trim() !== \"\") {\n        //if (e.target.value.trim() !== \"\") {\n        $HashWrapInner.innerHTML = \"#\" + e.target.value;\n        $HashWrapOuter === null || $HashWrapOuter === void 0 ? void 0 : $HashWrapOuter.appendChild($HashWrapInner);\n        setHashArr(hashArr => [...hashArr, hashtag]);\n        setHashtag(\"\");\n      }\n    }\n  }, [hashtag, hashArr]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hashDivrap\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"HashWrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"HashWrapOuter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"HashInput\",\n        type: \"text\",\n        value: hashtag,\n        onChange: onChangeHashtag,\n        onKeyUp: onKeyUp,\n        placeholder: \"\\uD574\\uC2DC\\uD0DC\\uADF8 \\uC785\\uB825\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FeedModalHashtags, \"Q1DUMJhQcPQ4c2Maa0UG9ADSH1Q=\");\n\n_c = FeedModalHashtags;\nexport default FeedModalHashtags;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedModalHashtags\");","map":{"version":3,"sources":["C:/java_full/Spring_boot/o9o9_frontend_0410/src/component/main/FeedModalHashtags.js"],"names":["React","useCallback","useEffect","useState","FeedModalHashtags","hashArr","setHashArr","hashtag","setHashtag","onChangeHashtag","e","target","value","onKeyUp","window","$HashWrapOuter","document","querySelector","$HashWrapInner","createElement","className","addEventListener","removeChild","console","log","innerHTML","filter","event","keyCode","trim","appendChild"],"mappings":";;;AAAA,OAAO,yBAAP;AACA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;;;AAEA,MAAMC,iBAAiB,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAA4B;AACrD;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC,CAFqD,CAGrD;AACA;;AAEA,QAAMM,eAAe,GAAIC,CAAD,IAAO;AAC7BF,IAAAA,UAAU,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD,GAFD,CANqD,CAUrD;AACA;AACA;;;AAEA,QAAMC,OAAO,GAAGZ,WAAW,CACxBS,CAAD,IAAO;AACL,QAAI,OAAOI,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACA,YAAMC,cAAc,GAAGC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAvB;AACA,YAAMC,cAAc,GAAGF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAAvB;AACAD,MAAAA,cAAc,CAACE,SAAf,GAA2B,eAA3B;AAEA;;AACAF,MAAAA,cAAc,CAACG,gBAAf,CAAgC,OAAhC,EAAyC,MAAM;AAC7CN,QAAAA,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEO,WAAhB,CAA4BJ,cAA5B;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYN,cAAc,CAACO,SAA3B;AACAnB,QAAAA,UAAU,CAACD,OAAO,CAACqB,MAAR,CAAgBnB,OAAD,IAAaA,OAA5B,CAAD,CAAV;AACD,OAJD;AAMA;;AACA,UACE,CAACO,MAAM,CAACa,KAAP,CAAaC,OAAb,KAAyB,EAAzB,IAA+Bd,MAAM,CAACa,KAAP,CAAaC,OAAb,KAAyB,EAAzD,KACAlB,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeiB,IAAf,OAA0B,EAF5B,EAGE;AACA;AACAX,QAAAA,cAAc,CAACO,SAAf,GAA2B,MAAMf,CAAC,CAACC,MAAF,CAASC,KAA1C;AACAG,QAAAA,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEe,WAAhB,CAA4BZ,cAA5B;AACAZ,QAAAA,UAAU,CAAED,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAaE,OAAb,CAAd,CAAV;AACAC,QAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF;AACF,GA3BwB,EA4BzB,CAACD,OAAD,EAAUF,OAAV,CA5ByB,CAA3B;AA+BA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,SAAS,EAAC,WADZ;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAEE,OAHT;AAIE,QAAA,QAAQ,EAAEE,eAJZ;AAKE,QAAA,OAAO,EAAEI,OALX;AAME,QAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA5DD;;GAAMT,iB;;KAAAA,iB;AA8DN,eAAeA,iBAAf","sourcesContent":["import \"./FeedModalHashtags.css\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nconst FeedModalHashtags = ({ hashArr, setHashArr }) => {\r\n  // onChange로 관리할 문자열\r\n  const [hashtag, setHashtag] = useState(\"\");\r\n  // 해시태그를 담을 배열\r\n  //const [hashArr, setHashArr] = useState([\"\"]);\r\n\r\n  const onChangeHashtag = (e) => {\r\n    setHashtag(e.target.value);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   console.log(hashArr);\r\n  // }, [hashArr]);\r\n\r\n  const onKeyUp = useCallback(\r\n    (e) => {\r\n      if (typeof window !== \"undefined\") {\r\n        /* 요소 불러오기, 만들기*/\r\n        const $HashWrapOuter = document.querySelector(\".HashWrapOuter\");\r\n        const $HashWrapInner = document.createElement(\"div\");\r\n        $HashWrapInner.className = \"HashWrapInner\";\r\n\r\n        /* 태그를 클릭 이벤트 관련 로직 */\r\n        $HashWrapInner.addEventListener(\"click\", () => {\r\n          $HashWrapOuter?.removeChild($HashWrapInner);\r\n          console.log($HashWrapInner.innerHTML);\r\n          setHashArr(hashArr.filter((hashtag) => hashtag));\r\n        });\r\n\r\n        /* enter 키 코드 :13 */\r\n        if (\r\n          (window.event.keyCode === 32 || window.event.keyCode === 13) &&\r\n          e.target.value.trim() !== \"\"\r\n        ) {\r\n          //if (e.target.value.trim() !== \"\") {\r\n          $HashWrapInner.innerHTML = \"#\" + e.target.value;\r\n          $HashWrapOuter?.appendChild($HashWrapInner);\r\n          setHashArr((hashArr) => [...hashArr, hashtag]);\r\n          setHashtag(\"\");\r\n        }\r\n      }\r\n    },\r\n    [hashtag, hashArr]\r\n  );\r\n\r\n  return (\r\n    <div className=\"hashDivrap\">\r\n      <div className=\"HashWrap\">\r\n        <div className=\"HashWrapOuter\"></div>\r\n        <input\r\n          className=\"HashInput\"\r\n          type=\"text\"\r\n          value={hashtag}\r\n          onChange={onChangeHashtag}\r\n          onKeyUp={onKeyUp}\r\n          placeholder=\"해시태그 입력\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedModalHashtags;\r\n"]},"metadata":{},"sourceType":"module"}