{"ast":null,"code":"var _jsxFileName = \"C:\\\\java_full\\\\Spring_boot\\\\o9o9_frontend_0410\\\\src\\\\component\\\\main\\\\Feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport \"./Feed.css\"; // import MessageSender from \"./MessageSender\";\n\nimport Post from \"./Post\";\nimport { useInView } from \"react-intersection-observer\";\nimport axios from \"axios\";\nimport FeedPopupButton from \"./FeedPopupButton\";\nimport HashTagBox from \"./HashTagBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createBulkPosts() {\n  const array = [];\n\n  for (let i = 0; i < 2; i++) {\n    array.push({\n      id: i,\n      profilePic: \"https://raw.githubusercontent.com/emilyoun/Facebook-Clone-with-REACT/main/Screen%20Shot%202021-01-02%20at%206.03.01%20PM.png\",\n      message: \"WOW this works! \",\n      timestamp: \"2022-03-25\",\n      username: \"emilyoun\",\n      image: \"https://img.webmd.com/dtmcms/live/webmd/consumer_assets/site_images/article_thumbnails/other/cat_relaxing_on_patio_other/1800x1200_cat_relaxing_on_patio_other.jpg\"\n    });\n  }\n\n  return array;\n}\n\nfunction Feed(_ref) {\n  _s();\n\n  let {\n    keyword\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [ref, inView] = useInView();\n  const [empty, setEmpty] = useState(false);\n  const [showHashtag, setShowHashtag] = useState(false); // 서버 통신 부분\n\n  const getPosts = useCallback(async () => {\n    setLoading(true);\n    await axios.get(`http://localhost:9090/mainboard/list/${page}?keyword=${keyword}`).then(res => {\n      console.log(res);\n      const newlist = res.data.list;\n      if (newlist.length === 0) setEmpty(true);\n      setPosts(prevState => [...prevState, ...newlist]);\n    }).catch(e => {\n      console.log(e);\n    });\n    setLoading(false);\n  }, [page, keyword]); // 테스트용\n  // const getPosts = useCallback(async () => {\n  //   setLoading(true);\n  //   setPosts((prevState) => [...prevState, ...createBulkPosts()]);\n  //   setLoading(false);\n  // }, [page]);\n  // posts 가 바뀔때마다 함수 실행\n\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]); // 사용자가 마지막 요소를 보고 있고,\n  // 로딩 중이 아니라면,\n  // 호출될 데이터가 있다면,\n\n  useEffect(() => {\n    console.log(\"infinite\", inView, !loading, !empty, page);\n\n    if (inView && !loading && !empty) {\n      setPage(prevState => prevState + 1);\n      console.log(\"page\", page);\n    }\n  }, [inView, loading, empty, page]);\n  useEffect(() => {\n    if (keyword !== \"\") {\n      setShowHashtag(true);\n      setPosts([]);\n      setPage(1);\n      setLoading(false);\n      setEmpty(false);\n\n      window.onbeforeunload = function pushRefresh() {\n        window.scrollTo(0, 0);\n      };\n    }\n  }, [keyword]); //! realtime connection\n  //useEffect(() => {\n  // db.collection(\"posts\")\n  //   .orderBy(\"timestamp\", \"desc\")\n  //   .onSnapshot((snapshot) =>\n  //     setPosts(snapshot.docs.map((doc) => ({ id: doc.id, data: doc.data() })))\n  //   );\n  //}, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [showHashtag && /*#__PURE__*/_jsxDEV(HashTagBox, {\n      keyword: keyword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(FeedPopupButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), posts.map((post, idx) => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: posts.length - 1 === idx ? /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref,\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(Post, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }, this)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Feed, \"nYSq6hRZUtIgmPP2RpHK5wR3KRI=\", false, function () {\n  return [useInView];\n});\n\n_c = Feed;\nexport default Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["C:/java_full/Spring_boot/o9o9_frontend_0410/src/component/main/Feed.js"],"names":["React","Fragment","useCallback","useEffect","useState","Post","useInView","axios","FeedPopupButton","HashTagBox","createBulkPosts","array","i","push","id","profilePic","message","timestamp","username","image","Feed","keyword","posts","setPosts","page","setPage","loading","setLoading","ref","inView","empty","setEmpty","showHashtag","setShowHashtag","getPosts","get","then","res","console","log","newlist","data","list","length","prevState","catch","e","window","onbeforeunload","pushRefresh","scrollTo","map","post","idx"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useEffect, useState } from \"react\";\r\nimport \"./Feed.css\";\r\n// import MessageSender from \"./MessageSender\";\r\nimport Post from \"./Post\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport axios from \"axios\";\r\nimport FeedPopupButton from \"./FeedPopupButton\";\r\nimport HashTagBox from \"./HashTagBox\";\r\n\r\nfunction createBulkPosts() {\r\n  const array = [];\r\n  for (let i = 0; i < 2; i++) {\r\n    array.push({\r\n      id: i,\r\n      profilePic:\r\n        \"https://raw.githubusercontent.com/emilyoun/Facebook-Clone-with-REACT/main/Screen%20Shot%202021-01-02%20at%206.03.01%20PM.png\",\r\n      message: \"WOW this works! \",\r\n      timestamp: \"2022-03-25\",\r\n      username: \"emilyoun\",\r\n      image:\r\n        \"https://img.webmd.com/dtmcms/live/webmd/consumer_assets/site_images/article_thumbnails/other/cat_relaxing_on_patio_other/1800x1200_cat_relaxing_on_patio_other.jpg\",\r\n    });\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction Feed({ keyword }) {\r\n  const [posts, setPosts] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [ref, inView] = useInView();\r\n  const [empty, setEmpty] = useState(false);\r\n  const [showHashtag, setShowHashtag] = useState(false);\r\n\r\n  // 서버 통신 부분\r\n  const getPosts = useCallback(async () => {\r\n    setLoading(true);\r\n    await axios\r\n      .get(`http://localhost:9090/mainboard/list/${page}?keyword=${keyword}`)\r\n      .then((res) => {\r\n        console.log(res);\r\n        const newlist = res.data.list;\r\n        if (newlist.length === 0) setEmpty(true);\r\n        setPosts((prevState) => [...prevState, ...newlist]);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n\r\n      \r\n    setLoading(false);\r\n  }, [page, keyword]);\r\n\r\n  // 테스트용\r\n  // const getPosts = useCallback(async () => {\r\n  //   setLoading(true);\r\n  //   setPosts((prevState) => [...prevState, ...createBulkPosts()]);\r\n  //   setLoading(false);\r\n  // }, [page]);\r\n\r\n  // posts 가 바뀔때마다 함수 실행\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, [getPosts]);\r\n\r\n  // 사용자가 마지막 요소를 보고 있고,\r\n  // 로딩 중이 아니라면,\r\n  // 호출될 데이터가 있다면,\r\n  useEffect(() => {\r\n    console.log(\"infinite\", inView, !loading, !empty, page);\r\n    if (inView && !loading && !empty) {\r\n      setPage((prevState) => prevState + 1);\r\n      console.log(\"page\", page);\r\n    }\r\n  }, [inView, loading, empty, page]);\r\n\r\n  useEffect(() => {\r\n    if (keyword !== \"\") {\r\n      setShowHashtag(true);\r\n      setPosts([]);\r\n      setPage(1);\r\n      setLoading(false);\r\n      setEmpty(false);\r\n      window.onbeforeunload = function pushRefresh() {\r\n        window.scrollTo(0, 0);\r\n      };\r\n    }\r\n  }, [keyword]);\r\n\r\n  //! realtime connection\r\n  //useEffect(() => {\r\n  // db.collection(\"posts\")\r\n  //   .orderBy(\"timestamp\", \"desc\")\r\n  //   .onSnapshot((snapshot) =>\r\n  //     setPosts(snapshot.docs.map((doc) => ({ id: doc.id, data: doc.data() })))\r\n  //   );\r\n  //}, []);\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      {showHashtag && <HashTagBox keyword={keyword} />}\r\n      <FeedPopupButton />\r\n      {posts.map(\r\n        (\r\n          post,\r\n          idx\r\n        ) => (\r\n          <Fragment key={idx}>\r\n            {posts.length - 1 === idx ? (\r\n              <div ref={ref}>\r\n                <Post\r\n                 post={post}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <Post\r\n               post={post}\r\n              />\r\n            )}\r\n          </Fragment>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n"]},"metadata":{},"sourceType":"module"}